@page "/"
@using ToDoList.DTO;
@using ToDoList.model;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject IToDoService ToDoService
@inject IDoingService DoingService
@inject IDoneService DoneService

<style>
    .list-section {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        height: 500px; /* adjust this value to fit your content */
        margin: 0 20px;
    }

        .list-section h2 {
            margin-bottom: 10px;
        }

        .list-section ul {
            margin: 10px;
            padding: 0;
            list-style-type: none;
            overflow-y: auto;
            max-height: calc(100% - 90px); /* adjust this value to fit your content */
        }

        .list-section input {
            margin-top: 10px;
            margin-right: 10px;
        }

        .list-section button {
            margin-top: 10px;
        }
</style>


<PageTitle>Todo</PageTitle>

<div style="display:flex; justify-content: center;">
    <h1>Todo App</h1>
</div>

<div style="display:flex; justify-content: center;">

    <table>

        <tr>
            <td style="padding: 20px;">
                <div class="list-section">
                    <h2>Yapacaklarım</h2>
                            <ul style="margin: 10px;">
                            @foreach (var item in ToDoService.ToDoItemDtos)
                            {

                                <li style="margin-bottom: 5px;">
                                        <div>
                                            @item.Text
                                            <button class="btn btn-primary" @onclick="() => EditItem(item)"><i class="oi oi-pencil"></i></button>
                                            <button class="btn btn-danger" @onclick="() => DeleteItem(item)"><i class="oi oi-x"></i></button>
                            
                                        </div>
                                    @if (item == editingItem)
                                        {
                                            <div>
                                                <input @bind="editingToDoText" />
                                                <button @onclick="() => SaveItem(item)">Save</button>
                                            </div>
                                        }
                       
                                </li>
                
              
                            }
                        </ul>
                        <div>
                            <input placeholder="Add todo" @bind="newTodo" />
                            <button @onclick="() => CreateItem(newTodo, Item.ToDoItem)">Add</button>
                         </div>
                 </div>
            </td>

            <td style="padding: 20px;">
                <div class="list-section">
                    <h2>Yapıyorum</h2>
                        <ul style="margin: 10px;">
                        @foreach (var item in DoingService.DoingItemDtos)
                        {


                            <li style="margin-bottom: 5px;">
                                    <div>
                                        @item.Text
                                        <button class="btn btn-primary" @onclick="() => EditItem(item)"><i class="oi oi-pencil"></i></button>
                                        <button class="btn btn-danger" @onclick="() => DeleteItem(item)"><i class="oi oi-x"></i></button>
                            
                                    </div>
                                @if (item == editingItem)
                                    {
                                        <div>
                                        <input @bind="editingDoingText" />
                                            <button @onclick="() => SaveItem(item)">Save</button>
                                        </div>
                                    }
                       
                            </li>
                
                        }
                    </ul>
                    <div>
                        <input placeholder="Add Doing" @bind="newDoing" />
                        <button @onclick="() => CreateItem(newDoing, Item.DoingItem)">Add</button>
                    </div>
                </div>
            </td>

            <td style="padding: 20px;">
                <div class="list-section">
                    <h2>Yaptım</h2>
                        <ul style="margin: 10px;">
                        @foreach (var item in DoneService.DoneItemDtos)
                        {

                            <li style="margin-bottom: 5px;">
                                    <div>
                                        @item.Text
                                        <button class="btn btn-primary" @onclick="() => EditItem(item)"><i class="oi oi-pencil"></i></button>
                                        <button class="btn btn-danger" @onclick="() => DeleteItem(item)"><i class="oi oi-x"></i></button>
                            
                                    </div>
                                @if (item == editingItem)
                                    {
                                        <div>
                                        <input @bind="editingDoneText" />
                                            <button @onclick="() => SaveItem(item)">Save</button>
                                        </div>
                                    }
                       
                            </li>
                


                        }
                    </ul>
                    <div>
                        <input placeholder="Add Done" @bind="newDone" />
                        <button @onclick="() => CreateItem(newDone, Item.DoneItem)">Add</button>
                    </div>
                </div>
            </td>

        </tr>

    </table>

</div>

@code {
    private string? newTodo = "";
    private string? newDoing = "";
    private string? newDone = "";
    private ItemDto? editingItem;
    private string editingToDoText = "";
    private string editingDoingText = "";
    private string editingDoneText = "";

    protected override async Task OnInitializedAsync()
    {
        await ToDoService.GetToDoItems();
        await DoingService.GetDoingItems();
        await DoneService.GetDoneItems();

    }

    private async void DeleteItem(ItemDto item)
    {
        switch (item)
        {
            case ToDoItemDto:
                await ToDoService.DeleteToDoItem(item.Id);
                break;

            case DoingItemDto:
                await DoingService.DeleteDoingItem(item.Id);
                break;

            case DoneItemDto:
                await DoneService.DeleteDoneItem(item.Id);
                break;
        }

        StateHasChanged();

    }

    private async void CreateItem(string? text, Item item)
    {
        if (text != "")
        {
            switch (item)
            {
                case Item.ToDoItem:
                    await ToDoService.CreateToDoItem(new ToDoItemDto(text));
                    newTodo = "";
                    break;

                case Item.DoingItem:
                    await DoingService.CreateDoingItem(new DoingItemDto(text));
                    newDoing = "";
                    break;

                case Item.DoneItem:
                    await DoneService.CreateDoneItem(new DoneItemDto(text));
                    newDone = "";
                    break;
            }

            StateHasChanged();

        }
        else
        {
            return;
        }
    }


    private void EditItem(ItemDto item)
    {
        if (editingItem != null)
        {
            SaveItem(editingItem);

        }
        editingItem = item;
        if (item is ToDoItemDto) editingToDoText = item.Text;
        if (item is DoingItemDto) editingDoingText = item.Text;
        if (item is DoneItemDto) editingDoneText = item.Text;
        
    }

    private async void SaveItem(ItemDto item)
    {

        switch (item)
        {

            case ToDoItemDto:
                if (editingToDoText == "") return;
                ItemDto itemdto = new ToDoItemDto(editingToDoText, item.Id);
                await ToDoService.UpdateToDoItem(itemdto);
                editingToDoText = "";
                break;

            case DoingItemDto:
                if (editingDoingText == "") return;
                ItemDto itemdto2 = new DoingItemDto(editingDoingText, item.Id);
                await DoingService.UpdateDoingItem(itemdto2);
                editingDoingText = "";
                break;

            case DoneItemDto:
                if (editingDoneText == "") return;
                ItemDto itemdto3 = new DoneItemDto(editingDoneText, item.Id);
                await DoneService.UpdateDoneItem(itemdto3);
                editingDoneText = "";
                break;
            }

            editingItem = null;
            StateHasChanged();


    }
  
}
