@page "/"
@using ToDoList.DTO;
@using ToDoList.model;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject IToDoService ToDoService
@inject IDoingService DoingService
@inject IDoneService DoneService

<PageTitle>Todo</PageTitle>

<h1>Todo App</h1>

Welcome to your new app.
<table>

    <tr>
        <td style="padding: 20px;">
            <h2>Yapacaklarım</h2>
            <ul style="margin: 10px;">
                @foreach (var item in ToDoService.ToDoItemDtos)
                {

                    <li style="margin-bottom: 5px;">
                            <div>
                                @item.Text
                                <button class="btn btn-primary" @onclick="() => EditItem(item)"><i class="oi oi-pencil"></i></button>
                                <button class="btn btn-danger" @onclick="() => DeleteItem(item)"><i class="oi oi-x"></i></button>
                            
                            </div>
                        @if (item == editingItem)
                            {
                                <div>
                                    <input @bind="editingToDoText" />
                                    <button @onclick="() => SaveItem(item)">Save</button>
                                </div>
                            }
                       
                    </li>
                
              
                }
            </ul>

            <input placeholder="Add todo" @bind="newTodo" />
            <button @onclick="() => CreateItem(newTodo, Item.ToDoItem)">Add</button>
        </td>

        <td style="padding: 20px;">
            <h2>Yapıyorum</h2>
            <ul style="margin: 10px;">
                @foreach (var item in DoingService.DoingItemDtos)
                {


                    <li style="margin-bottom: 5px;">
                            <div>
                                @item.Text
                                <button class="btn btn-primary" @onclick="() => EditItem(item)"><i class="oi oi-pencil"></i></button>
                                <button class="btn btn-danger" @onclick="() => DeleteItem(item)"><i class="oi oi-x"></i></button>
                            
                            </div>
                        @if (item == editingItem)
                            {
                                <div>
                                <input @bind="editingDoingText" />
                                    <button @onclick="() => SaveItem(item)">Save</button>
                                </div>
                            }
                       
                    </li>
                
                }
            </ul>

            <input placeholder="Add Doing" @bind="newDoing" />
            <button @onclick="() => CreateItem(newDoing, Item.DoingItem)">Add</button>
        </td>

        <td style="padding: 20px;">
            <h2>Yaptım</h2>
            <ul style="margin: 10px;">
                @foreach (var item in DoneService.DoneItemDtos)
                {

                    <li style="margin-bottom: 5px;">
                            <div>
                                @item.Text
                                <button class="btn btn-primary" @onclick="() => EditItem(item)"><i class="oi oi-pencil"></i></button>
                                <button class="btn btn-danger" @onclick="() => DeleteItem(item)"><i class="oi oi-x"></i></button>
                            
                            </div>
                        @if (item == editingItem)
                            {
                                <div>
                                <input @bind="editingDoneText" />
                                    <button @onclick="() => SaveItem(item)">Save</button>
                                </div>
                            }
                       
                    </li>
                


                }
            </ul>

            <input placeholder="Add Done" @bind="newDone" />
            <button @onclick="() => CreateItem(newDone, Item.DoneItem)">Add</button>
        </td>

    </tr>


</table>
@code {
    private string? newTodo;
    private string? newDoing;
    private string? newDone;
    private ItemDto? editingItem;
    private string editingToDoText = "";
    private string editingDoingText = "";
    private string editingDoneText = "";

    protected override async Task OnInitializedAsync()
    {
        await ToDoService.GetToDoItems();
        await DoingService.GetDoingItems();
        await DoneService.GetDoneItems();

    }

    private async void DeleteItem(ItemDto item)
    {
        switch (item)
        {
            case ToDoItemDto:
                await ToDoService.DeleteToDoItem(item.Id);
                break;

            case DoingItemDto:
                await DoingService.DeleteDoingItem(item.Id);
                break;

            case DoneItemDto:
                await DoneService.DeleteDoneItem(item.Id);
                break;
        }

        StateHasChanged();

    }

    private async void CreateItem(string? text, Item item)
    {
        if (text != null)
        {
            switch (item)
            {
                case Item.ToDoItem:
                    await ToDoService.CreateToDoItem(new ToDoItemDto(text));
                    newTodo = "";
                    break;

                case Item.DoingItem:
                    await DoingService.CreateDoingItem(new DoingItemDto(text));
                    newDoing = "";
                    break;

                case Item.DoneItem:
                    await DoneService.CreateDoneItem(new DoneItemDto(text));
                    newDone = "";
                    break;
            }

            StateHasChanged();

        }
    }


    private void EditItem(ItemDto item)
    {
        if (editingItem != null)
        {
            SaveItem(editingItem);

        }
        editingItem = item;
        if (item is ToDoItemDto) editingToDoText = item.Text;
        if (item is DoingItemDto) editingDoingText = item.Text;
        if (item is DoneItemDto) editingDoneText = item.Text;
        
    }

    private async void SaveItem(ItemDto item)
    {

        switch (item)
        {

            case ToDoItemDto:
                if (editingToDoText == "") return;
                ItemDto itemdto = new ItemDto(editingToDoText, item.Id);
                await ToDoService.UpdateToDoItem(itemdto);
                editingToDoText = "";
                break;

            case DoingItemDto:
                if (editingDoingText == "") return;
                ItemDto itemdto2 = new ItemDto(editingDoingText, item.Id);
                await DoingService.UpdateDoingItem(itemdto2);
                editingDoingText = "";
                break;

            case DoneItemDto:
                if (editingDoneText == "") return;
                ItemDto itemdto3 = new ItemDto(editingDoneText, item.Id);
                await DoneService.UpdateDoneItem(itemdto3);
                editingDoneText = "";
                break;
            }

            editingItem = null;
            StateHasChanged();


    }
  
}
